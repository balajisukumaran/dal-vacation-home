AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  test

Transform:
  - AWS::Serverless-2016-10-31

Resources:
  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: "*"

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: "ExampleApi"
      StageName: "Prod"
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'http://localhost:5173'"

  UserRegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/user/register.PostItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt AdminRole.Arn
      Environment:
        Variables:
          PORT: "4000"
          DB_URL: mongodb+srv://admin:admin@dalvactionhome.ghnejjw.mongodb.net/?retryWrites=true&w=majority&appName=dalvactionhome
          JWT_SECRET: jwtsecret
          JWT_EXPIRY: 20d
          COOKIE_TIME: "7"
          SESSION_SECRET: your secret session (string)
          CLOUDINARY_NAME: your secret session
          CLOUDINARY_API_KEY: your cloudinary key
          CLOUDINARY_API_SECRET: your cloudinary api secret
          CLIENT_URL: http://localhost:5173
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/register/
            Method: POST
            RestApiId: !Ref MyApi

  UserLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/user/login.PostItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt AdminRole.Arn
      Environment:
        Variables:
          PORT: "4000"
          DB_URL: mongodb+srv://admin:admin@dalvactionhome.ghnejjw.mongodb.net/?retryWrites=true&w=majority&appName=dalvactionhome
          JWT_SECRET: jwtsecret
          JWT_EXPIRY: 20d
          COOKIE_TIME: "7"
          SESSION_SECRET: your secret session (string)
          CLOUDINARY_NAME: your secret session
          CLOUDINARY_API_KEY: your cloudinary key
          CLOUDINARY_API_SECRET: your cloudinary api secret
          CLIENT_URL: http://localhost:5173
      Events:
        Api:
          Type: Api
          Properties:
            Path: /user/login/
            Method: POST
            RestApiId: !Ref MyApi

  PlaceGetAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/place/getAll.GetItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt AdminRole.Arn
      Environment:
        Variables:
          PORT: "4000"
          DB_URL: mongodb+srv://admin:admin@dalvactionhome.ghnejjw.mongodb.net/?retryWrites=true&w=majority&appName=dalvactionhome
          JWT_SECRET: jwtsecret
          JWT_EXPIRY: 20d
          COOKIE_TIME: "7"
          SESSION_SECRET: your secret session (string)
          CLOUDINARY_NAME: your secret session
          CLOUDINARY_API_KEY: your cloudinary key
          CLOUDINARY_API_SECRET: your cloudinary api secret
          CLIENT_URL: http://localhost:5173
      Events:
        Api:
          Type: Api
          Properties:
            Path: /places/
            Method: GET
            RestApiId: !Ref MyApi

  PlaceAddFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/place/addPlace.PostItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt AdminRole.Arn
      Environment:
        Variables:
          PORT: "4000"
          DB_URL: mongodb+srv://admin:admin@dalvactionhome.ghnejjw.mongodb.net/?retryWrites=true&w=majority&appName=dalvactionhome
          JWT_SECRET: jwtsecret
          JWT_EXPIRY: 20d
          COOKIE_TIME: "7"
          SESSION_SECRET: your secret session (string)
          CLOUDINARY_NAME: your secret session
          CLOUDINARY_API_KEY: your cloudinary key
          CLOUDINARY_API_SECRET: your cloudinary api secret
          CLIENT_URL: http://localhost:5173
      Events:
        Api:
          Type: Api
          Properties:
            Path: /places/add-places/
            Method: POST
            RestApiId: !Ref MyApi

  UserPlacesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/place/userPlaces.GetItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt AdminRole.Arn
      Environment:
        Variables:
          PORT: "4000"
          DB_URL: mongodb+srv://admin:admin@dalvactionhome.ghnejjw.mongodb.net/?retryWrites=true&w=majority&appName=dalvactionhome
          JWT_SECRET: jwtsecret
          JWT_EXPIRY: 20d
          COOKIE_TIME: "7"
          SESSION_SECRET: your secret session (string)
          CLOUDINARY_NAME: your secret session
          CLOUDINARY_API_KEY: your cloudinary key
          CLOUDINARY_API_SECRET: your cloudinary api secret
          CLIENT_URL: http://localhost:5173
      Events:
        Api:
          Type: Api
          Properties:
            Path: /places/user-places/
            Method: GET
            RestApiId: !Ref MyApi

  UpdatePlaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/place/updatePlace.PutItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt AdminRole.Arn
      Environment:
        Variables:
          PORT: "4000"
          DB_URL: mongodb+srv://admin:admin@dalvactionhome.ghnejjw.mongodb.net/?retryWrites=true&w=majority&appName=dalvactionhome
          JWT_SECRET: jwtsecret
          JWT_EXPIRY: 20d
          COOKIE_TIME: "7"
          SESSION_SECRET: your secret session (string)
          CLOUDINARY_NAME: your secret session
          CLOUDINARY_API_KEY: your cloudinary key
          CLOUDINARY_API_SECRET: your cloudinary api secret
          CLIENT_URL: http://localhost:5173
      Events:
        Api:
          Type: Api
          Properties:
            Path: /places/update-place/
            Method: PUT
            RestApiId: !Ref MyApi

  GetPlaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/place/getPlace.GetItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt AdminRole.Arn
      Environment:
        Variables:
          PORT: "4000"
          DB_URL: mongodb+srv://admin:admin@dalvactionhome.ghnejjw.mongodb.net/?retryWrites=true&w=majority&appName=dalvactionhome
          JWT_SECRET: jwtsecret
          JWT_EXPIRY: 20d
          COOKIE_TIME: "7"
          SESSION_SECRET: your secret session (string)
          CLOUDINARY_NAME: your secret session
          CLOUDINARY_API_KEY: your cloudinary key
          CLOUDINARY_API_SECRET: your cloudinary api secret
          CLIENT_URL: http://localhost:5173
      Events:
        Api:
          Type: Api
          Properties:
            Path: /places/{id}
            Method: GET
            RestApiId: !Ref MyApi

  SearchPlaceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/place/searchPlace.GetItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt AdminRole.Arn
      Environment:
        Variables:
          PORT: "4000"
          DB_URL: mongodb+srv://admin:admin@dalvactionhome.ghnejjw.mongodb.net/?retryWrites=true&w=majority&appName=dalvactionhome
          JWT_SECRET: jwtsecret
          JWT_EXPIRY: 20d
          COOKIE_TIME: "7"
          SESSION_SECRET: your secret session (string)
          CLOUDINARY_NAME: your secret session
          CLOUDINARY_API_KEY: your cloudinary key
          CLOUDINARY_API_SECRET: your cloudinary api secret
          CLIENT_URL: http://localhost:5173
      Events:
        Api:
          Type: Api
          Properties:
            Path: /places/search/{key}
            Method: GET
            RestApiId: !Ref MyApi

  GetBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/booking/getBooking.GetItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt AdminRole.Arn
      Environment:
        Variables:
          PORT: "4000"
          DB_URL: mongodb+srv://admin:admin@dalvactionhome.ghnejjw.mongodb.net/?retryWrites=true&w=majority&appName=dalvactionhome
          JWT_SECRET: jwtsecret
          JWT_EXPIRY: 20d
          COOKIE_TIME: "7"
          SESSION_SECRET: your secret session (string)
          CLOUDINARY_NAME: your secret session
          CLOUDINARY_API_KEY: your cloudinary key
          CLOUDINARY_API_SECRET: your cloudinary api secret
          CLIENT_URL: http://localhost:5173
      Events:
        Api:
          Type: Api
          Properties:
            Path: /bookings/
            Method: GET
            RestApiId: !Ref MyApi

  CreateBookingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/booking/createBooking.PostItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Role: !GetAtt AdminRole.Arn
      Environment:
        Variables:
          PORT: "4000"
          DB_URL: mongodb+srv://admin:admin@dalvactionhome.ghnejjw.mongodb.net/?retryWrites=true&w=majority&appName=dalvactionhome
          JWT_SECRET: jwtsecret
          JWT_EXPIRY: 20d
          COOKIE_TIME: "7"
          SESSION_SECRET: your secret session (string)
          CLOUDINARY_NAME: your secret session
          CLOUDINARY_API_KEY: your cloudinary key
          CLOUDINARY_API_SECRET: your cloudinary api secret
          CLIENT_URL: http://localhost:5173
      Events:
        Api:
          Type: Api
          Properties:
            Path: /bookings/
            Method: POST
            RestApiId: !Ref MyApi

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
